/*
 * This file is generated by jOOQ.
 */
package com.tan.jooq.mysql.dao.tables;


import com.tan.jooq.mysql.dao.Indexes;
import com.tan.jooq.mysql.dao.Keys;
import com.tan.jooq.mysql.dao.Test;
import com.tan.jooq.mysql.dao.tables.records.MoneyPO;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MoneyTB extends TableImpl<MoneyPO> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.money</code>
     */
    public static final MoneyTB MONEY = new MoneyTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MoneyPO> getRecordType() {
        return MoneyPO.class;
    }

    /**
     * The column <code>test.money.id</code>.
     */
    public final TableField<MoneyPO, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.money.name</code>. 用户名
     */
    public final TableField<MoneyPO, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "用户名");

    /**
     * The column <code>test.money.money</code>. 钱
     */
    public final TableField<MoneyPO, Integer> MONEY_ = createField(DSL.name("money"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "钱");

    /**
     * The column <code>test.money.is_deleted</code>.
     */
    public final TableField<MoneyPO, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>test.money.create_at</code>. 创建时间
     */
    public final TableField<MoneyPO, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>test.money.update_at</code>. 更新时间
     */
    public final TableField<MoneyPO, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "更新时间");

    private MoneyTB(Name alias, Table<MoneyPO> aliased) {
        this(alias, aliased, null);
    }

    private MoneyTB(Name alias, Table<MoneyPO> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.money</code> table reference
     */
    public MoneyTB(String alias) {
        this(DSL.name(alias), MONEY);
    }

    /**
     * Create an aliased <code>test.money</code> table reference
     */
    public MoneyTB(Name alias) {
        this(alias, MONEY);
    }

    /**
     * Create a <code>test.money</code> table reference
     */
    public MoneyTB() {
        this(DSL.name("money"), null);
    }

    public <O extends Record> MoneyTB(Table<O> child, ForeignKey<O, MoneyPO> key) {
        super(child, key, MONEY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Test.TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MONEY_NAME);
    }

    @Override
    public Identity<MoneyPO, UInteger> getIdentity() {
        return (Identity<MoneyPO, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<MoneyPO> getPrimaryKey() {
        return Keys.KEY_MONEY_PRIMARY;
    }

    @Override
    public MoneyTB as(String alias) {
        return new MoneyTB(DSL.name(alias), this);
    }

    @Override
    public MoneyTB as(Name alias) {
        return new MoneyTB(alias, this);
    }

    @Override
    public MoneyTB as(Table<?> alias) {
        return new MoneyTB(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyTB rename(String name) {
        return new MoneyTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyTB rename(Name name) {
        return new MoneyTB(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MoneyTB rename(Table<?> name) {
        return new MoneyTB(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UInteger, String, Integer, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UInteger, ? super String, ? super Integer, ? super Byte, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UInteger, ? super String, ? super Integer, ? super Byte, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
