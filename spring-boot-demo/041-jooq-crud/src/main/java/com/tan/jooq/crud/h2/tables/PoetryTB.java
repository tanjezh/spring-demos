/*
 * This file is generated by jOOQ.
 */
package com.tan.jooq.crud.h2.tables;


import com.tan.jooq.crud.h2.Keys;
import com.tan.jooq.crud.h2.Public;
import com.tan.jooq.crud.h2.tables.records.PoetryPO;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.sql.Timestamp;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PoetryTB extends TableImpl<PoetryPO> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.POETRY</code>
     */
    public static final PoetryTB POETRY = new PoetryTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoetryPO> getRecordType() {
        return PoetryPO.class;
    }

    /**
     * The column <code>PUBLIC.POETRY.ID</code>.
     */
    public final TableField<PoetryPO, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POETRY.POET_ID</code>.
     */
    public final TableField<PoetryPO, Integer> POET_ID = createField(DSL.name("POET_ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("'0'"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.POETRY.TITLE</code>.
     */
    public final TableField<PoetryPO, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.POETRY.CONTENT</code>.
     */
    public final TableField<PoetryPO, String> CONTENT = createField(DSL.name("CONTENT"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.POETRY.CREATE_AT</code>. 创建时间
     */
    public final TableField<PoetryPO, Timestamp> CREATE_AT = createField(DSL.name("CREATE_AT"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    private PoetryTB(Name alias, Table<PoetryPO> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PoetryTB(Name alias, Table<PoetryPO> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.POETRY</code> table reference
     */
    public PoetryTB(String alias) {
        this(DSL.name(alias), POETRY);
    }

    /**
     * Create an aliased <code>PUBLIC.POETRY</code> table reference
     */
    public PoetryTB(Name alias) {
        this(alias, POETRY);
    }

    /**
     * Create a <code>PUBLIC.POETRY</code> table reference
     */
    public PoetryTB() {
        this(DSL.name("POETRY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PoetryPO> getPrimaryKey() {
        return Keys.PK_T_POETRY;
    }

    @Override
    public PoetryTB as(String alias) {
        return new PoetryTB(DSL.name(alias), this);
    }

    @Override
    public PoetryTB as(Name alias) {
        return new PoetryTB(alias, this);
    }

    @Override
    public PoetryTB as(Table<?> alias) {
        return new PoetryTB(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PoetryTB rename(String name) {
        return new PoetryTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoetryTB rename(Name name) {
        return new PoetryTB(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoetryTB rename(Table<?> name) {
        return new PoetryTB(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoetryTB where(Condition condition) {
        return new PoetryTB(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoetryTB where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoetryTB where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoetryTB where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PoetryTB where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PoetryTB where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PoetryTB where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PoetryTB where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoetryTB whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoetryTB whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
