/*
 * This file is generated by jOOQ.
 */
package com.tan.jooq.h2.tables;


import com.tan.jooq.h2.Keys;
import com.tan.jooq.h2.Public;
import com.tan.jooq.h2.tables.records.PoetRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Poet extends TableImpl<PoetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.POET</code>
     */
    public static final Poet POET = new Poet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoetRecord> getRecordType() {
        return PoetRecord.class;
    }

    /**
     * The column <code>PUBLIC.POET.ID</code>.
     */
    public final TableField<PoetRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POET.NAME</code>.
     */
    public final TableField<PoetRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "");

    private Poet(Name alias, Table<PoetRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Poet(Name alias, Table<PoetRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.POET</code> table reference
     */
    public Poet(String alias) {
        this(DSL.name(alias), POET);
    }

    /**
     * Create an aliased <code>PUBLIC.POET</code> table reference
     */
    public Poet(Name alias) {
        this(alias, POET);
    }

    /**
     * Create a <code>PUBLIC.POET</code> table reference
     */
    public Poet() {
        this(DSL.name("POET"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PoetRecord> getPrimaryKey() {
        return Keys.PK_T_POET;
    }

    @Override
    public Poet as(String alias) {
        return new Poet(DSL.name(alias), this);
    }

    @Override
    public Poet as(Name alias) {
        return new Poet(alias, this);
    }

    @Override
    public Poet as(Table<?> alias) {
        return new Poet(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Poet rename(String name) {
        return new Poet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Poet rename(Name name) {
        return new Poet(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Poet rename(Table<?> name) {
        return new Poet(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Poet where(Condition condition) {
        return new Poet(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Poet where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Poet where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Poet where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Poet where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Poet where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Poet where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Poet where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Poet whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Poet whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
